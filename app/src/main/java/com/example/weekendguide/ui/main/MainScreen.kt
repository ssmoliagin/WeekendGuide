package com.example.weekendguide.ui.main

import android.Manifest
import android.app.Application
import android.content.Context
import android.content.pm.PackageManager
import android.location.Location
import android.util.Log
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ExperimentalLayoutApi
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.List
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FilterChip
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Slider
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.produceState
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.rememberAsyncImagePainter
import com.example.weekendguide.Constants
import com.example.weekendguide.data.model.POI
import com.example.weekendguide.data.model.Region
import com.example.weekendguide.data.preferences.UserPreferences
import com.example.weekendguide.data.preferences.UserSettings
import com.example.weekendguide.viewmodel.LocationViewModel
import com.example.weekendguide.viewmodel.POIViewModel
import com.example.weekendguide.viewmodel.POIViewModelFactory
import com.example.weekendguide.viewmodel.ViewModelFactory
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.CameraPosition
import com.google.android.gms.maps.model.LatLng
import com.google.android.libraries.places.api.Places
import com.google.android.libraries.places.api.model.AutocompletePrediction
import com.google.android.libraries.places.api.model.Place
import com.google.android.libraries.places.api.model.TypeFilter
import com.google.android.libraries.places.api.net.FetchPlaceRequest
import com.google.android.libraries.places.api.net.FindAutocompletePredictionsRequest
import com.google.firebase.auth.FirebaseAuth
import com.google.maps.android.compose.Circle
import com.google.maps.android.compose.GoogleMap
import com.google.maps.android.compose.Marker
import com.google.maps.android.compose.MarkerState
import com.google.maps.android.compose.rememberCameraPositionState
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.platform.LocalView
import androidx.compose.material.icons.filled.* // –≠—Ç–æ –Ω—É–∂–Ω–æ!
import androidx.compose.material3.AssistChip
import androidx.compose.runtime.mutableStateMapOf
import com.example.weekendguide.viewmodel.GPViewModel
import com.example.weekendguide.viewmodel.RegionViewModel
import kotlinx.coroutines.delay

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(context: Context = LocalContext.current) {
    //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–æ–Ω
    var showMap by remember { mutableStateOf(false) }
    var showFiltersPanel by remember { mutableStateOf(false) }
    var showStatistics by remember { mutableStateOf(false) }
    var showProfile by remember { mutableStateOf(false) }
    var showPOIInMap by remember { mutableStateOf(false) }
    var showListPoi by remember { mutableStateOf(false) }
    var onSortPOI by remember { mutableStateOf(false) }
    var showFullPOI by remember { mutableStateOf(false) }
    var showOnlyFavorites by remember { mutableStateOf(false) } //—Å–∫—Ä—ã—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä –¢–û–õ–¨–ö–û –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
    var showOnlyVisited by remember { mutableStateOf(false) } // —Å–∫—Ä—ã—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä –¢–û–õ–¨–ö–û –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
    var showVisited by remember { mutableStateOf(true) } // –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ

    var selectedItem by remember { mutableStateOf("main") }// üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    var selectedPOI by remember { mutableStateOf<POI?>(null) }

    val prefs = UserPreferences(context)
    val region by produceState<Region?>(initialValue = null) {
        value = prefs.getHomeRegion()
    }

    val regionViewModel: RegionViewModel = viewModel()

    val locationViewModel: LocationViewModel = viewModel(
        key = "LocationViewModel",
        factory = ViewModelFactory(context.applicationContext as Application)
    )

    val gpViewModel: GPViewModel = viewModel(
        key = "GPViewModel",
        factory = ViewModelFactory(context.applicationContext as Application)
    )

    //–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    val currentGP by gpViewModel.currentGP.collectAsState()
    val totalGP by gpViewModel.totalGP.collectAsState()
    val spentGP by gpViewModel.spentGP.collectAsState()

    // --- –û–ü–†–ï–î–ï–õ–Ø–ï–ú –õ–û–ö–ê–¶–ò–Æ ---
    val locationPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission(),
        onResult = { isGranted ->
            if (isGranted) {
                locationViewModel.detectLocationFromGPS()
            } else {
                Toast.makeText(context, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", Toast.LENGTH_SHORT).show()
            }
        }
    )

    val userLocation by locationViewModel.location.collectAsState()
    val currentCity by locationViewModel.currentCity.collectAsState()

    var onRequestLocationChange = {
        when {
            ContextCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED -> {
                locationViewModel.detectLocationFromGPS()
            }
            else -> {
                locationPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
            }
        }
    }

    var cityQuery by remember { mutableStateOf("") }
    var predictions by remember { mutableStateOf(listOf<AutocompletePrediction>()) }

    val api = Constants.GOOGLE_MAP_API
    val placesClient = remember {
        if (!Places.isInitialized()) {
            Places.initialize(context, api)
        }
        Places.createClient(context)
    }

    fun fetchPredictions(query: String) {
        val request = FindAutocompletePredictionsRequest.builder()
            .setQuery(query)
            .setTypeFilter(TypeFilter.CITIES)
            .build()
        placesClient.findAutocompletePredictions(request)
            .addOnSuccessListener { response ->
                predictions = response.autocompletePredictions
            }
            .addOnFailureListener { exception ->
                Log.e("MainScreen", "Places API error", exception)
            }
    }

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    region?.let { reg ->
        val poiViewModel: POIViewModel = viewModel(factory = POIViewModelFactory(context, reg))
        val poiList by poiViewModel.poiList.collectAsState()
        val visitedPoiIds by poiViewModel.visitedPoiIds.collectAsState() //–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –ø–æ–∏
        val favoriteIds by poiViewModel.favoriteIds.collectAsState() //  –ò–ó–ë–†–ê–ù–ù–´–ï –ü–û–ò
        val onFavoriteClick: (String) -> Unit = { poiId ->
            poiViewModel.toggleFavorite(poiId)
        }

        /* //—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –≤—Å–µ –æ–∫, —É–¥–∞–ª–∏—Ç—å
        val onCheckpointClick: (String) -> Unit = { poiId ->
            poiViewModel.markPoiVisited(poiId)
        }
         */

        //–§–ò–õ–¨–¢–†–ê–¶–ò–Ø
        var selectedRadius by remember { mutableStateOf("200–∫–º") }

        val allTypes = listOf("castle", "nature", "park", "funpark", "museum", "swimming", "hiking", "cycling", "zoo", "city-walk", "festival", "extreme")
        var selectedTypes by remember { mutableStateOf(allTypes) }

        val onTypeToggle: (String) -> Unit = { type ->
            selectedTypes = if (type in selectedTypes) {
                selectedTypes - type
            } else {
                selectedTypes + type
            }
        }

        val radiusValue = when (selectedRadius) {
            "20–∫–º" -> 20
            "50–∫–º" -> 50
            "100–∫–º" -> 100
            "200–∫–º" -> 200
            "‚àû" -> Int.MAX_VALUE
            else -> 200
        }

        //–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã—Ö –ø–æ–∏
        val filteredPOIList = remember(poiList, userLocation, selectedRadius, selectedTypes.toList()) {
            val distanceFiltered = userLocation?.let { (lat, lon) ->
                poiList.filter { poi ->
                    val result = FloatArray(1)
                    Location.distanceBetween(lat, lon, poi.lat, poi.lng, result)
                    val distanceInKm = result[0] / 1000
                    distanceInKm <= radiusValue
                }
            } ?: poiList
            distanceFiltered.filter { poi -> selectedTypes.contains(poi.type) }
        }

        //–æ–¥–∏–Ω —Ç–∏–ø
        val onSelectSingleType: (String) -> Unit = { type ->
            selectedTypes = listOf(type)
        }

    //—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ POI
        val finalPOIList = remember(
            filteredPOIList,
            onSortPOI,
            showOnlyFavorites,
            favoriteIds,
            showVisited,
            showOnlyVisited,
            visitedPoiIds
        ) {
            var baseList = filteredPOIList

            // üîπ –¢–æ–ª—å–∫–æ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ ‚Üí —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ visited
            baseList = when {
                showOnlyVisited -> baseList.filter { poi -> visitedPoiIds.contains(poi.id) }
                !showVisited -> baseList.filterNot { poi -> visitedPoiIds.contains(poi.id) }
                else -> baseList
            }

            // ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ
            if (showOnlyFavorites) {
                baseList = baseList.filter { poi -> favoriteIds.contains(poi.id) }
            }

            // üìç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            if (onSortPOI) {
                userLocation?.let { (lat, lon) ->
                    baseList.sortedBy { poi ->
                        val result = FloatArray(1)
                        Location.distanceBetween(lat, lon, poi.lat, poi.lng, result)
                        result[0]
                    }
                } ?: baseList
            } else {
                baseList
            }
        }

        fun resetFilters() {
            selectedTypes = allTypes
            selectedRadius = "200–∫–º"
            showOnlyVisited = false
            showOnlyFavorites = false

            showListPoi = false
            showStatistics = false
            showMap = false
        }

        // --- –ù–ê–í–ò–ì–ê–¶–ò–Ø ---

        //–ø–æ–∫–∞–∑ —à–∞–ø–∫–∏
        @Composable
        fun showTopAppBar ()
        {
            TopAppBar(
                currentGP = currentGP, // ‚ûï –¥–æ–±–∞–≤–∏–ª–∏
                onItemSelected = { selectedItem = it }, // –≤—ã–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –º–µ–Ω—é
                topBarTitle = if (showListPoi) {
                    if (showOnlyFavorites)"favorites"
                    else if (showStatistics) "statistic"
                    else  "${finalPOIList.size} –º–µ—Å—Ç —Ä—è–¥–æ–º —Å $currentCity"
                } else if (showStatistics) "statistic"
                        else "main",
            onDismiss = {resetFilters()},
        ) }

        //–ø–æ–∫–∞–∑ –º–µ–Ω—é
        @Composable
        fun showNavigationBar() {
            NavigationBar(
                selectedItem = selectedItem,
                onItemSelected = { selectedItem = it }, // –≤—ã–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –º–µ–Ω—é
                onShowFavoritesList = {
                    showOnlyFavorites = true
                    selectedRadius = "‚àû"
                    showListPoi = true
                },
                onOpenProfile = { showProfile = true },
                onOpenStatistics = {
                    showOnlyVisited = true
                    selectedRadius = "‚àû"
                    showStatistics = true
                },
                onDismiss = {resetFilters()}
            )}

        //–ø–æ–∫–∞–∑ –ø–∞–Ω–µ–ª—å –ª–æ–∫–∞—Ü–∏–∏
        @Composable
        fun showLocationPanel() {
            LocationPanel(
                onShowScreenType =
                    if (showMap) "map"
                    else "main",
                onLocationSelected = { city, latLng ->
                    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º lat –∏ lng
                    val (lat, lng) = latLng
                    locationViewModel.setManualLocation(city, lat, lng)
                },
                onRequestGPS = onRequestLocationChange,
                userCurrentCity = currentCity,
                onDismiss = {resetFilters()},
            )}

        //–ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä—ã
        @Composable
        fun showFiltersButtons() {
            FiltersButtons(
                onShowScreenType =
                    if (showMap) "map"
                    else "list",
                userCurrentCity = currentCity,
                onRequestGPS = onRequestLocationChange,
                selectedRadius = selectedRadius,
                onRadiusChange = { selectedRadius = it },
                onOpenMapScreen = { showMap = true },
                onOpenListScreen = {showListPoi = true},
                onOpenFilters = { showFiltersPanel = true },
                onDismiss = { showMap = false },
            )
        }



        if (showMap) {
            MapScreen(
                userPOIList = finalPOIList,
                userLocation = userLocation,
                selectedRadius = selectedRadius,
                onSelectPOI = { poi -> selectedPOI = poi },
                onOpenPOIinMap = {showPOIInMap = true},
                isFavorite = { poi -> favoriteIds.contains(poi.id) },
                isVisited = { poi -> visitedPoiIds.contains(poi.id) },
                showLocationPanel = { showLocationPanel() },
                showFiltersButtons = { showFiltersButtons() },
            )
        } else if (showListPoi) {
            ListPOIScreen(
                userPOIList = finalPOIList,
                userLocation = userLocation,
                userCurrentCity = currentCity,
                onSelectPOI = { poi -> selectedPOI = poi },
                isFavorite = { poi -> favoriteIds.contains(poi.id) },
                isVisited = { poi -> visitedPoiIds.contains(poi.id) },
                onFavoriteClick = onFavoriteClick,
                onPOIClick = {showFullPOI = true},
                showTopAppBar = { showTopAppBar () },
                showNavigationBar = { showNavigationBar() },
                showFiltersButtons = { showFiltersButtons() },
            )
        }

        else {
            MainContent(
                userPOIList = finalPOIList,
                userLocation = userLocation,
                userCurrentCity = currentCity,
                onOpenListScreen = {showListPoi = true},
                onSelectSingleType = onSelectSingleType,
                isFavorite = { poi -> favoriteIds.contains(poi.id) },
                isVisited = { poi -> visitedPoiIds.contains(poi.id) },
                onFavoriteClick = onFavoriteClick,
                onPOIClick = {showFullPOI = true},
                onSelectPOI = { poi -> selectedPOI = poi },
                showNavigationBar = { showNavigationBar() },
                showTopAppBar = { showTopAppBar () },
                showLocationPanel = { showLocationPanel() },
                showFiltersButtons = { showFiltersButtons() },
                )
        }

        // –≠–∫—Ä–∞–Ω –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if (showStatistics) {
            StatisticsScreen(
                totalGP = totalGP,
                currentGP = currentGP,
                spentGP = spentGP,
                userPOIList = finalPOIList,
                totalPOIList = poiList,
                allTypes = allTypes,
                showNavigationBar = { showNavigationBar() },
                showTopAppBar = { showTopAppBar () },
                gpViewModel = gpViewModel,
            )
        }

        // ‚úÖ –ü–∞–Ω–µ–ª—å –§–∏–ª—å—Ç—Ä—ã
        if (showFiltersPanel) {
            ModalBottomSheet(
                onDismissRequest = {showFiltersPanel = false},
                sheetState = rememberModalBottomSheetState()
            ) {
                FiltersPanel(
                    selectedRadius = selectedRadius,
                    onRadiusChange = { selectedRadius = it },
                    allTypes = poiList.map { it.type }.distinct(),
                    selectedTypes = selectedTypes,
                    onTypeToggle = onTypeToggle,
                    onSelectAllTypes = { selectedTypes = allTypes },
                    onClearAllTypes = { selectedTypes = emptyList() },
                    showVisited = showVisited,
                    onToggleShowVisited = { showVisited = !showVisited }
                )
            }
        }

        // ‚úÖ –ü–∞–Ω–µ–ª—å –ü—Ä–æ—Ñ–∏–ª—å
        if(showProfile) {
            ModalBottomSheet(
                onDismissRequest = {showProfile = false},
                sheetState = rememberModalBottomSheetState()
            ) {
                ProfilePanel (
                    onDismiss = { showProfile = false}
                )
            }
        }

        // ‚úÖ POI –Ω–∞ –ö–∞—Ä—Ç–µ
        val poi = selectedPOI
        if (showPOIInMap && poi != null && !showFullPOI) {
            ModalBottomSheet(
                onDismissRequest = {showPOIInMap = false},
                sheetState = rememberModalBottomSheetState()
            ) {
                POIFullScreen (
                    poi = poi,
                    isFavorite = favoriteIds.contains(poi.id),
                    onFavoriteClick = { poiViewModel.toggleFavorite(poi.id) },
                    isVisited = visitedPoiIds.contains(poi.id),
                    userLocation = userLocation,
                    userCurrentCity = currentCity,
                    onDismiss = {
                        selectedPOI = null
                        showFullPOI = false
                    },
                    poiViewModel = poiViewModel,
                    gpViewModel = gpViewModel,
                )
            }
        }

        //‚úÖ POI –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        if (showFullPOI && poi != null) {
            POIFullScreen (
                poi = poi,
                isFavorite = favoriteIds.contains(poi.id),
                onFavoriteClick = { poiViewModel.toggleFavorite(poi.id) },
                isVisited = visitedPoiIds.contains(poi.id),
                userLocation = userLocation,
                userCurrentCity = currentCity,
                onDismiss = {
                    selectedPOI = null
                    showFullPOI = false
                },
                poiViewModel = poiViewModel,
                gpViewModel = gpViewModel,
            )
        }
        
    } ?: LoadingScreen()
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainContent(
    userPOIList: List<POI>,
    userLocation: Pair<Double, Double>?,
    userCurrentCity: String?,
    onOpenListScreen: () -> Unit,
    onSelectSingleType: (String) -> Unit,
    isFavorite: (POI) -> Boolean,
    isVisited: (POI) -> Boolean,
    onFavoriteClick: (String) -> Unit,
    onPOIClick: () -> Unit,
    onSelectPOI: (POI) -> Unit,
    showNavigationBar: @Composable () -> Unit,
    showTopAppBar: @Composable () -> Unit,
    showLocationPanel: @Composable () -> Unit,
    showFiltersButtons: @Composable () -> Unit,
    ) {
    
    val listState = rememberLazyListState()
    val screenWidth = LocalConfiguration.current.screenWidthDp.dp // —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞

    Scaffold(

        //–®–ê–ü–ö–ê
        topBar = {
            showTopAppBar()
        },
        //–ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ
        bottomBar = {
            showNavigationBar()
        }

        // –û–°–ù–û–í–ù–û–ô –≠–ö–†–ê–ù
    ) { paddingValues ->

        Column (
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .padding(horizontal = 4.dp)
        ) {
            //–ü–æ–ª–µ –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
            showLocationPanel()

           Spacer(modifier = Modifier.height(4.dp))

            // –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä—ã
            showFiltersButtons()


            Spacer(modifier = Modifier.height(16.dp))

            // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
            LazyColumn(
                state = listState,
                verticalArrangement = Arrangement.spacedBy(20.dp),
                modifier = Modifier.weight(1f)
            ) {
                item {
                    val displayedPOIs = userPOIList.shuffled().take(10)
                    val count = userPOIList.size


                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            text = "$count –º–µ—Å—Ç —Ä—è–¥–æ–º —Å ${userCurrentCity ?: "–≤–∞–º–∏"}",
                            style = MaterialTheme.typography.titleMedium
                        )
                        Text(
                            text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
                            color = MaterialTheme.colorScheme.primary,
                            style = MaterialTheme.typography.bodyMedium,
                            modifier = Modifier.clickable {
                                onOpenListScreen()       // –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º
                            }
                        )
                    }

                    LazyRow(
                        horizontalArrangement = Arrangement.spacedBy(12.dp),
                        contentPadding = PaddingValues(horizontal = 16.dp)
                    ) {
                        items(displayedPOIs) { poi ->
                            Box(
                                modifier = Modifier
                                    .width(screenWidth - 32.dp)
                            ) {
                                POICard(
                                    poi = poi,
                                    isFavorite = isFavorite(poi),
                                    isVisited = isVisited(poi),
                                    onFavoriteClick = { onFavoriteClick(poi.id) },
                                    userLocation = userLocation,
                                    userCurrentCity = userCurrentCity,
                                    cardType = "list",
                                    onClick = onPOIClick,
                                    onSelectPOI = onSelectPOI
                                )
                            }

                        }
                    }
                }

                //–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–∏–ø–∞–º
                val types = userPOIList.map { it.type }.toSet().filter { it.isNotBlank() }
                types.forEach { type ->
                    item {
                        val allTypedPOIs = userPOIList.filter { it.type == type }
                        val displayedPOIs = allTypedPOIs.shuffled().take(6)
                        val count = allTypedPOIs.size

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp),
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(
                                text = "$count ${type.replaceFirstChar { it.uppercase() }} —Ä—è–¥–æ–º —Å ${userCurrentCity ?: "–≤–∞–º–∏"}",
                                style = MaterialTheme.typography.titleMedium
                            )
                            Text(
                                text = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
                                color = MaterialTheme.colorScheme.primary,
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.clickable {
                                    onSelectSingleType(type) // —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É
                                    onOpenListScreen()       // –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ —Å–ø–∏—Å–∫–æ–º
                                }
                            )
                        }

                        LazyRow(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
                            items(displayedPOIs) { poi ->
                                POICard(
                                    poi = poi,
                                    isFavorite = isFavorite(poi),
                                    isVisited = isVisited(poi),
                                    onFavoriteClick = { onFavoriteClick(poi.id) },
                                    userLocation = userLocation,
                                    userCurrentCity = userCurrentCity,
                                    cardType = "mini",
                                    onClick = onPOIClick,
                                    onSelectPOI = onSelectPOI
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MapScreen(
    userPOIList: List<POI>,
    userLocation: Pair<Double, Double>?,
    selectedRadius: String,
    onSelectPOI: (POI) -> Unit,
    onOpenPOIinMap: () -> Unit,
    isFavorite: (POI) -> Boolean,
    isVisited: (POI) -> Boolean,
    showLocationPanel: @Composable () -> Unit,
    showFiltersButtons: @Composable () -> Unit,
    ) {

    val radiusValue = when (selectedRadius) {
        "20–∫–º" -> 20_000.0
        "50–∫–º" -> 50_000.0
        "100–∫–º" -> 100_000.0
        "200–∫–º" -> 200_000.0
        "‚àû" -> 0.0
        else -> 200_000.0
    }
    val zoom = when (selectedRadius) {
        "20–∫–º" -> 10f
        "50–∫–º" -> 9f
        "100–∫–º" -> 8f
        else -> 7f
    }

    val cameraPositionState = rememberCameraPositionState {
        position = CameraPosition.fromLatLngZoom(
            userLocation?.let { LatLng(it.first, it.second) } ?: LatLng(51.1657, 10.4515),
            zoom
        )
    }
        Box(
            modifier = Modifier
                .fillMaxSize()
        ) {
            GoogleMap(
                modifier = Modifier.fillMaxSize(),
                cameraPositionState = cameraPositionState,
             //   properties = MapProperties(isMyLocationEnabled = true) // –ö–Ω–æ–ø–∫–∞ –≥–¥–µ —è
            ) {


                userPOIList.forEach { poi ->
                    val markerColor = when {
                        isVisited(poi) -> BitmapDescriptorFactory.HUE_GREEN
                        isFavorite(poi) -> BitmapDescriptorFactory.HUE_YELLOW
                        else -> BitmapDescriptorFactory.HUE_RED
                    }

                    val icon = BitmapDescriptorFactory.defaultMarker(markerColor)

                    Marker(
                        state = MarkerState(position = LatLng(poi.lat, poi.lng)),
                        title = poi.title,
                        icon = icon,
                        onClick = {
                            onSelectPOI(poi)
                            onOpenPOIinMap()
                            true
                        }
                    )
                }

                userLocation?.let {
                    Circle(
                        center = LatLng(it.first, it.second),
                        radius = radiusValue,
                        fillColor = Color.Blue.copy(alpha = 0.15f),
                        strokeColor = Color.Blue,
                        strokeWidth = 2f
                    )
                }
            }

            Column (
                modifier = Modifier
                    .padding(top = 40.dp, start = 4.dp, end = 4.dp)
                    .fillMaxSize()
            ) {
                //–ü–æ–ª–µ –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
                showLocationPanel()

                Spacer(modifier = Modifier.height(4.dp))

                // –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä—ã
                showFiltersButtons()
            }
        }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ListPOIScreen(
    userPOIList: List<POI>,
    userLocation: Pair<Double, Double>?,
    userCurrentCity: String?,
    onSelectPOI: (POI) -> Unit,
    isFavorite: (POI) -> Boolean,
    isVisited: (POI) -> Boolean,
    onFavoriteClick: (String) -> Unit,
    onPOIClick: () -> Unit,
    showTopAppBar: @Composable () -> Unit,
    showNavigationBar: @Composable () -> Unit,
    showFiltersButtons: @Composable () -> Unit,
) {
    val listState = rememberLazyListState()

    Scaffold(

        //–®–ê–ü–ö–ê
        topBar = {
            showTopAppBar()
        },
        //–ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ
        bottomBar = {
            showNavigationBar()
        }

        ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .padding(horizontal = 4.dp)
        ) {

            Spacer(modifier = Modifier.height(8.dp))

            // –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä—ã

            showFiltersButtons()

            Spacer(modifier = Modifier.height(12.dp))

            // üìã –°–ø–∏—Å–æ–∫ POI

            LazyColumn(
                state = listState,
                verticalArrangement = Arrangement.spacedBy(16.dp),
                modifier = Modifier.weight(1f)
            ) {
                items(userPOIList) { poi ->
                    POICard(
                        poi = poi,
                        isFavorite = isFavorite(poi),
                        isVisited = isVisited(poi),
                        onFavoriteClick = { onFavoriteClick(poi.id) },
                        userLocation = userLocation,
                        userCurrentCity = userCurrentCity,
                        cardType = "list",
                        onClick = onPOIClick,
                        onSelectPOI = onSelectPOI
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class)
@Composable
fun FiltersPanel(
    selectedRadius: String,
    onRadiusChange: (String) -> Unit,
    allTypes: List<String>,
    selectedTypes: List<String>,
    onTypeToggle: (String) -> Unit,
    onSelectAllTypes: () -> Unit,
    onClearAllTypes: () -> Unit,
    showVisited: Boolean,
    onToggleShowVisited: () -> Unit,
) {
    val radiusValues = listOf("20", "50", "100", "200", "‚àû")
    val radiusSliderPosition = radiusValues.indexOfFirst {
        it.removeSuffix("–∫–º") == selectedRadius.removeSuffix("–∫–º")
    }.coerceAtLeast(0)

    val typeIcons = mapOf(
        "castle" to Icons.Default.Castle,
        "nature" to Icons.Default.Forest,
        "park" to Icons.Default.NaturePeople,
        "funpark" to Icons.Default.Attractions,
        "museum" to Icons.Default.Museum,
        "swimming" to Icons.Default.Pool,
        "hiking" to Icons.Default.DirectionsWalk,
        "cycling" to Icons.Default.DirectionsBike,
        "zoo" to Icons.Default.Pets,
        "city-walk" to Icons.Default.LocationCity,
        "festival" to Icons.Default.Celebration,
        "extreme" to Icons.Default.DownhillSkiing
    )

    val allSelected = selectedTypes.containsAll(allTypes)

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(16.dp),
        elevation = CardDefaults.cardElevation(8.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            // üîµ –†–∞–¥–∏—É—Å
            Text("–î–∞–ª—å–Ω–æ—Å—Ç—å (–∫–º)", style = MaterialTheme.typography.titleMedium)

            Slider(
                value = radiusSliderPosition.toFloat(),
                onValueChange = {
                    val selected = radiusValues[it.toInt()]
                    onRadiusChange(if (selected == "‚àû") selected else "${selected}–∫–º")
                },
                steps = radiusValues.size - 2,
                valueRange = 0f..(radiusValues.size - 1).toFloat()
            )

            Text(
                text = "–í—ã–±—Ä–∞–Ω–æ: $selectedRadius",
                modifier = Modifier.padding(bottom = 12.dp),
                style = MaterialTheme.typography.bodySmall
            )

            // ‚úÖ –¢–∏–ø—ã –º–µ—Å—Ç
            Text("–¢–∏–ø—ã –º–µ—Å—Ç", style = MaterialTheme.typography.titleMedium)

            FlowRow(
                modifier = Modifier.padding(top = 4.dp),
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                allTypes.forEach { type ->
                    val icon = typeIcons[type]
                    FilterChip(
                        selected = selectedTypes.contains(type),
                        onClick = { onTypeToggle(type) },
                        label = {
                            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                                if (icon != null) {
                                    Icon(
                                        imageVector = icon,
                                        contentDescription = type,
                                        modifier = Modifier.size(20.dp)
                                    )
                                    Text(
                                        text = type,
                                        style = MaterialTheme.typography.labelSmall,
                                        fontSize = 10.sp,
                                        maxLines = 1
                                    )
                                } else {
                                    Text(type)
                                }
                            }
                        }
                    )
                }

                // üîÅ –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ / –£–±—Ä–∞—Ç—å –≤—Å–µ"
                AssistChip(
                    onClick = {
                        if (allSelected) onClearAllTypes() else onSelectAllTypes()
                    },
                    label = {
                        Text(if (allSelected) "–£–±—Ä–∞—Ç—å –≤—Å–µ" else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
                    },
                    leadingIcon = {
                        Icon(
                            imageVector = if (allSelected) Icons.Default.Clear else Icons.Default.DoneAll,
                            contentDescription = null
                        )
                    }
                )
            }

            // ‚òëÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .padding(vertical = 4.dp)
                    .clickable { onToggleShowVisited() }
            ) {
                Checkbox(
                    checked = showVisited,
                    onCheckedChange = { onToggleShowVisited() }
                )
                Text("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ", style = MaterialTheme.typography.bodyLarge)
            }
        }
    }
}



@Composable
fun ProfilePanel(
    onDismiss: () -> Unit
) {
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()
    val preferences = remember { UserPreferences(context) }
    val user = FirebaseAuth.getInstance().currentUser

    var userSettings by remember { mutableStateOf<UserSettings?>(null) }

    LaunchedEffect(Unit) {
        userSettings = withContext(Dispatchers.IO) {
            preferences.getAll()
        }
    }

    Surface(
        tonalElevation = 4.dp,
        shape = RoundedCornerShape(16.dp),
        modifier = Modifier
            .padding(16.dp)
            .fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(24.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text("–ü—Ä–æ—Ñ–∏–ª—å", style = MaterialTheme.typography.headlineSmall)

            user?.email?.let {
                ProfileRow(label = "Email", value = it)
            }
            ProfileRow(
                label = "currentGP",
                value = userSettings?.currentGP.toString() ?: "-"
            )

            ProfileRow(
                label = "totalGP",
                value = userSettings?.totalGP.toString() ?: "-"
            )

            ProfileRow(
                label = "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                value = userSettings?.language ?: "-"
            )

            ProfileRow(
                label = "–†–µ–≥–∏–æ–Ω—ã",
                value = userSettings?.purchasedRegions?.joinToString(", ") ?: "-"
            )

            ProfileRow(
                label = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                value = userSettings?.favoritePoiIds?.joinToString(", ") ?: "-"
            )

            ProfileRow(
                label = "–ü–æ—Å–µ—â–µ–Ω–Ω–æ–µ",
                value = userSettings?.visitedPoiIds?.joinToString(", ") ?: "-"
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = {
                    coroutineScope.launch {
                        FirebaseAuth.getInstance().signOut()
                     //   context.dataStore.edit { it.clear() }
                        onDismiss()
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.error,
                    contentColor = MaterialTheme.colorScheme.onError
                )
            ) {
                Icon(Icons.Default.Close, contentDescription = null)
                Spacer(modifier = Modifier.width(8.dp))
                Text("–í—ã–π—Ç–∏")
            }
        }
    }
}

@Composable
private fun ProfileRow(label: String, value: String) {
    Column {
        Text(label, style = MaterialTheme.typography.labelMedium, color = Color.Gray)
        Text(value, style = MaterialTheme.typography.bodyLarge)
    }
}


@Composable
fun POICard(
    poi: POI,
    isFavorite: Boolean,
    isVisited: Boolean,

    onFavoriteClick: () -> Unit,
    userLocation: Pair<Double, Double>? = null,
    userCurrentCity: String? = null,
    cardType: String? = "list",
    onClick: () -> Unit,
    onSelectPOI: (POI) -> Unit,
    ) {

    val cardModifier: Modifier
    val imageModifier: Modifier
    val isImageLeft: Boolean

    when (cardType) {
        "mini" -> {
            cardModifier = Modifier
                .width(200.dp)
                .height(300.dp)
                .clickable {
                    onSelectPOI(poi)
                    onClick()
                }
            imageModifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
            isImageLeft = false
        }
        else -> {  //"list"
            cardModifier = Modifier
                .fillMaxWidth()
                .height(400.dp)
                .clickable {
                    onSelectPOI(poi)
                    onClick()
                }
            imageModifier = Modifier
                .fillMaxWidth()
                .height(300.dp)
            isImageLeft = false
        }
    }

    val distanceKm = remember(poi, userLocation) {
        userLocation?.let { (userLat, userLng) ->
            val result = FloatArray(1)
            Location.distanceBetween(userLat, userLng, poi.lat, poi.lng, result)
            (result[0] / 1000).toInt()
        }
    }

    Card(
        modifier = cardModifier,
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
            Column(modifier = Modifier.fillMaxSize()) {
                Box(modifier = imageModifier) {
                    poi.imageUrl?.let { imageUrl ->
                        Image(
                            painter = rememberAsyncImagePainter(imageUrl),
                            contentDescription = null,
                            modifier = Modifier.fillMaxSize(),
                            contentScale = ContentScale.Crop
                        )
                    }

                    //–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ
                    if (isVisited) {
                        Icon(
                            modifier = Modifier
                                .align(Alignment.TopStart)
                                .padding(4.dp),
                            imageVector = Icons.Default.CheckCircle,
                            contentDescription = "–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ",
                            tint = Color.Green
                        )
                    }

                    //–∏–∑–±—Ä–∞–Ω–Ω—ã–µ
                    IconButton(
                        onClick = onFavoriteClick,
                        modifier = Modifier
                            .align(Alignment.TopEnd)
                            .padding(4.dp)
                            .background(Color.White.copy(alpha = 0.6f), shape = CircleShape)
                    ) {
                        Icon(
                            imageVector = if (isFavorite) Icons.Default.Bookmark else Icons.Default.BookmarkBorder,
                            contentDescription = "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ",
                            tint = if (isFavorite) Color.Red else Color.Gray
                        )
                    }
                }

                Column(modifier = Modifier.padding(8.dp)) {
                    Text(
                        text = poi.title,
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        maxLines = 2
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = poi.description,
                        style = MaterialTheme.typography.bodySmall,
                        maxLines = 1
                    )
                    distanceKm?.let {
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "$it –∫–º –æ—Ç $userCurrentCity",
                            style = MaterialTheme.typography.labelSmall,
                            color = Color.Gray
                        )
                    }
                }
            }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun POIFullScreen(
    poi: POI,
    isFavorite: Boolean,
    isVisited: Boolean,

    onFavoriteClick: () -> Unit,
    userLocation: Pair<Double, Double>? = null,
    userCurrentCity: String? = null,
    onDismiss: () -> Unit,
    poiViewModel: POIViewModel,
    gpViewModel: GPViewModel
) {

    val distanceKm = remember(poi, userLocation) {
        userLocation?.let { (userLat, userLng) ->
            val result = FloatArray(1)
            Location.distanceBetween(userLat, userLng, poi.lat, poi.lng, result)
            (result[0] / 1000).toInt()
        }
    }

    val wikiDescription by poiViewModel.wikiDescription.collectAsState()

    val context = LocalContext.current
    val locationViewModel: LocationViewModel = viewModel()
    val coroutineScope = rememberCoroutineScope()

    val location by locationViewModel.location.collectAsState()

    val prefs = remember { UserPreferences(context) }


    LaunchedEffect(poi.title) {
        poiViewModel.loadWikipediaDescription(poi.title)
    }
/*
    fun handleCheckpointClick() {
        coroutineScope.launch {
            try {
                val oldLocation = locationViewModel.location.value

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º GPS-–ª–æ–∫–∞—Ü–∏—é
                locationViewModel.detectLocationFromGPS()

                // –ñ–¥—ë–º, –ø–æ–∫–∞ –ª–æ–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç—Å—è
                val newLocation = locationViewModel.location
                    .filterNotNull()
                    .dropWhile { it == oldLocation }
                    .first()

                // –°—á–∏—Ç–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                val result = FloatArray(1)
                Location.distanceBetween(
                    newLocation.first,
                    newLocation.second,
                    poi.lat,
                    poi.lng,
                    result
                )
                val distanceMeters = result[0]

                if (distanceMeters < 20000000) {  //–¥–∏—Å—Ç–∞–Ω—Ü–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
                    poiViewModel.markPoiVisited(poi.id)
                    gpViewModel.addGP(100)
                    Toast.makeText(context, "+100 GP –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ!", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(context, "–í—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ç–æ—á–∫–∏", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                Toast.makeText(context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ GPS", Toast.LENGTH_SHORT).show()
                e.printStackTrace()
            }
        }
    }

 */

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(poi.title, color = Color.White) },
                navigationIcon = {
                    IconButton(onClick = onDismiss) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "–ù–∞–∑–∞–¥",
                            tint = Color.White
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary
                ),
            )
        }
    ) { padding ->
        Box(modifier = Modifier.fillMaxSize()) {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(padding)
            ) {
                item {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(300.dp)
                    ) {
                        poi.imageUrl?.let { imageUrl ->
                            Image(
                                painter = rememberAsyncImagePainter(imageUrl),
                                contentDescription = null,
                                modifier = Modifier.fillMaxSize(),
                                contentScale = ContentScale.Crop
                            )
                        }

                        // –õ–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è –∏–∫–æ–Ω–∫–∞ "–ü–æ—Å–µ—â–µ–Ω–æ" ‚Äî –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
                        if(isVisited) {
                            Icon(
                                modifier = Modifier
                                    .align(Alignment.TopStart)
                                    .padding(8.dp),
                                imageVector = Icons.Default.CheckCircle,
                                contentDescription = "–ü–æ—Å–µ—â–µ–Ω–Ω–æ",
                                tint = Color.Green
                            )
                        }

                        // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è –∏–∫–æ–Ω–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
                        IconButton(
                            onClick = onFavoriteClick,
                            modifier = Modifier
                                .align(Alignment.TopEnd)
                                .padding(8.dp)
                                .background(Color.White.copy(alpha = 0.7f), shape = CircleShape)
                        ) {
                            Icon(
                                imageVector = if (isFavorite) Icons.Default.Bookmark else Icons.Default.BookmarkBorder,
                                contentDescription = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                tint = if (isFavorite) Color.Red else Color.Gray
                            )
                        }
                    }
                }

                item {
                    // –†–µ–π—Ç–∏–Ω–≥
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier
                            .padding(horizontal = 16.dp, vertical = 8.dp)
                    ) {
                        repeat(5) { index ->
                            Icon(
                                imageVector = Icons.Default.Star,
                                contentDescription = null,
                                tint = if (index < 5) Color(0xFFFFD700) else Color.LightGray,
                                modifier = Modifier.size(24.dp)
                            )
                        }
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "–†–µ–π—Ç–∏–Ω–≥: 5.0",
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                }

                item {
                    // –û–ø–∏—Å–∞–Ω–∏–µ
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            text = poi.title,
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = wikiDescription ?: poi.description,
                            style = MaterialTheme.typography.bodyLarge,
                            lineHeight = 20.sp
                        )
                        distanceKm?.let {
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "$it –∫–º –æ—Ç $userCurrentCity",
                                style = MaterialTheme.typography.labelLarge,
                                color = Color.Gray
                            )
                        }
                    }
                }

                item {
                    // –ö–∞—Ä—Ç–∞
                    Text(
                        text = "–ù–∞ –∫–∞—Ä—Ç–µ:",
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)
                    )
                    GoogleMap(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(200.dp)
                            .padding(horizontal = 16.dp),
                        cameraPositionState = rememberCameraPositionState {
                            position = CameraPosition.fromLatLngZoom(
                                LatLng(poi.lat, poi.lng), 14f
                            )
                        }
                    ) {
                        Marker(
                            state = MarkerState(position = LatLng(poi.lat, poi.lng)),
                            title = poi.title
                        )
                    }
                }

                item {
                    // –û—Ç–∑—ã–≤—ã
                    Text(
                        text = "–û—Ç–∑—ã–≤—ã",
                        style = MaterialTheme.typography.titleMedium,
                        modifier = Modifier.padding(16.dp)
                    )

                    Column(modifier = Modifier.padding(horizontal = 16.dp)) {
                        Text("¬´–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ! –û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!¬ª", style = MaterialTheme.typography.bodyMedium)
                        Spacer(modifier = Modifier.height(8.dp))

                        OutlinedTextField(
                            value = "",
                            onValueChange = {},
                            placeholder = { Text("–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤...") },
                            modifier = Modifier.fillMaxWidth()
                        )

                        Button(
                            onClick = { /* TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ */ },
                            modifier = Modifier
                                .padding(vertical = 8.dp)
                                .align(Alignment.End)
                        ) {
                            Text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
                        }
                    }
                }
            }

            // –ö–Ω–æ–ø–∫–∞ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
            var isChecking by remember { mutableStateOf(false) }
            Button(
                onClick = {
                    isChecking = true
                    coroutineScope.launch {
                        gpViewModel.checkAndAwardGPForPOI(poi, locationViewModel) { success ->
                            if (success) {
                                poiViewModel.markPoiVisited(poi.id)
                                Toast.makeText(context, "+100 GP –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ!", Toast.LENGTH_SHORT).show()
                            } else {
                                Toast.makeText(context, "–í—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ç–æ—á–∫–∏", Toast.LENGTH_SHORT).show()
                            }
                            isChecking = false
                        }
                    }
                },
                enabled = !isVisited && !isChecking,
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .fillMaxWidth()
                    .padding(16.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isVisited) Color.Gray else Color.Green
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(
                    text = when {
                        isVisited -> "–£–∂–µ –ø–æ—Å–µ—â–µ–Ω–æ"
                        isChecking -> "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
                        else -> "–ß–µ–∫–ø–æ–∏–Ω—Ç"
                    },
                    color = Color.White
                )
            }
        }
    }
}

// –≠–õ–ï–ú–ï–ù–¢–´ –≠–ö–†–ê–ù–ê
//—à–∞–ø–∫–∞
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TopAppBar (
    currentGP: Int,
    onItemSelected: (String) -> Unit,
    topBarTitle: String,
    onDismiss: () -> Unit
) {
    val sound = LocalView.current

    /* old
      val context = LocalContext.current
      val prefs = UserPreferences(context)
      var value by remember { mutableStateOf<UserSettings?>(null) }
      LaunchedEffect(Unit) {
          value = prefs.getAll()
      }
       */

    val title = when (topBarTitle) {
        "main" -> "Weekend Guide"
        "favorites" -> "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        "statistic" -> "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        else -> topBarTitle
    }

    TopAppBar(
        title = { Text(title, color = Color.White) },
        colors = TopAppBarDefaults.topAppBarColors(containerColor = MaterialTheme.colorScheme.primary),
        actions = {
            Row(
                modifier = Modifier
                    .padding(end = 4.dp),
                verticalAlignment = Alignment.CenterVertically) {
                Text("$currentGP üèÜ", color = Color.White)
            }
        },
        navigationIcon = {
            if (topBarTitle != "main") {
                IconButton(onClick = {
                    sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                    onItemSelected("main")
                    onDismiss()
                }) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "–ù–∞–∑–∞–¥",
                        tint = Color.White
                    )
                }
            }
        },
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NavigationBar(
    selectedItem: String,
    onItemSelected: (String) -> Unit,
    onShowFavoritesList: () -> Unit,
    onOpenProfile: () -> Unit,
    onOpenStatistics: () -> Unit,
    onDismiss: () -> Unit
) {
    val sound = LocalView.current

    NavigationBar {
        NavigationBarItem(
            selected = selectedItem == "main",
            onClick = {
                onItemSelected("main")
                sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                onDismiss()
            },
            icon = { Icon(Icons.Default.Search, contentDescription = "–ü–æ–∏—Å–∫") },
            label = { Text("–ü–æ–∏—Å–∫") }
        )

        NavigationBarItem(
            selected = selectedItem == "favorites",
            onClick = {
                onItemSelected("favorites")
                sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                onDismiss()
                onShowFavoritesList()
            },
            icon = { Icon(Icons.Default.Bookmarks, contentDescription = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") },
            label = { Text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") }
        )

        NavigationBarItem(
            selected = selectedItem == "statistics",
            onClick = {
                onItemSelected("statistics")
                sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                onDismiss()
                onOpenStatistics()
            },
            icon = { Icon(Icons.Default.BarChart, contentDescription = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è") },
            label = { Text("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è") }
        )

        NavigationBarItem(
            selected = selectedItem == "profile",
            onClick = {
                onItemSelected("profile")
                sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                onOpenProfile()
            },
            icon = { Icon(Icons.Default.Person, contentDescription = "–ü—Ä–æ—Ñ–∏–ª—å") },
            label = { Text("–ü—Ä–æ—Ñ–∏–ª—å") }
        )
    }
}



//–ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LocationPanel(
    userCurrentCity: String?,
    onLocationSelected: (String, Pair<Double, Double>) -> Unit,
    onRequestGPS: () -> Unit,
    onShowScreenType: String?,
    onDismiss: () -> Unit
)
{
    val sound = LocalView.current
    val context = LocalContext.current
    val placesClient = remember { Places.createClient(context) }

    var query by remember { mutableStateOf("") }
    var suggestions by remember { mutableStateOf<List<AutocompletePrediction>>(emptyList()) }

    LaunchedEffect(query) {
        if (query.length >= 3) {
            val request = FindAutocompletePredictionsRequest.builder()
                .setQuery(query)
                .build()
            placesClient.findAutocompletePredictions(request)
                .addOnSuccessListener { response ->
                    suggestions = response.autocompletePredictions
                }
                .addOnFailureListener { e ->
                    suggestions = emptyList()
                    e.printStackTrace()
                }
        } else {
            suggestions = emptyList()
        }
    }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
    ) {
        OutlinedTextField(
            value = query,
            onValueChange = { query = it },
            label = { Text(userCurrentCity ?:"–ì–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å") },
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(12.dp)),

            leadingIcon = {
                if (onShowScreenType == "map") {
                    // üîô –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                    IconButton(onClick = {
                        sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                        onDismiss()
                    }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "–ù–∞–∑–∞–¥",
                            tint = MaterialTheme.colorScheme.onSurface
                        )
                    }
                } else Icon(Icons.Default.Search, contentDescription = null)
            },
            trailingIcon = {
                IconButton(onClick = {
                    sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                    onRequestGPS()
                    suggestions = emptyList() //clear
                }) {
                    Icon(Icons.Default.LocationOn, contentDescription = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ GPS")
                }
            },
            singleLine = true,
            shape = RoundedCornerShape(50.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White
            )
        )

        LazyColumn(
            modifier = Modifier.heightIn(max = 200.dp)
        ) {
            items(suggestions) { prediction ->
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp)
                        .clickable {
                            sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                            val placeId = prediction.placeId
                            val placeRequest = FetchPlaceRequest.builder(
                                placeId,
                                listOf(Place.Field.LAT_LNG, Place.Field.NAME)
                            ).build()

                            placesClient.fetchPlace(placeRequest)
                                .addOnSuccessListener { result ->
                                    val place = result.place
                                    val latLng = place.latLng
                                    if (latLng != null) {
                                        onLocationSelected(
                                            place.name ?: "",
                                            Pair(latLng.latitude, latLng.longitude)
                                        )
                                    }
                                    suggestions = emptyList() //clear
                                }
                        },
                    shape = RoundedCornerShape(50.dp),
                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)
                ) {
                    Text(
                        text = prediction.getFullText(null).toString(),
                        modifier = Modifier.padding(12.dp),
                        style = MaterialTheme.typography.bodyLarge
                    )
                }
            }
        }
    }
}

//–∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä—ã
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FiltersButtons(
    userCurrentCity: String?,
    onRequestGPS: () -> Unit,
    selectedRadius: String,
    onRadiusChange: (String) -> Unit,
    onOpenMapScreen: () -> Unit,
    onOpenListScreen: () -> Unit,
    onOpenFilters: () -> Unit,
    onShowScreenType: String? = null,
    onDismiss: () -> Unit,
) {
    val sound = LocalView.current

    val buttonHeight = 30.dp
    var radiusExpanded by remember { mutableStateOf(false) }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(4.dp)
    ) {

        val commonButtonColors = ButtonDefaults.outlinedButtonColors(
            containerColor = Color.White // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        )

        if (onShowScreenType == "map") {
            OutlinedButton(
                onClick = {
                    sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                    onOpenListScreen()
                    onDismiss()
                },
                modifier = Modifier
                    .weight(1f)
                    .height(buttonHeight),
                shape = RoundedCornerShape(4.dp),
                border = BorderStroke(1.dp, MaterialTheme.colorScheme.primary),
                contentPadding = PaddingValues(horizontal = 8.dp),
                colors = commonButtonColors
            ) {
                Icon(
                    imageVector = Icons.Default.List,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text("–°–ø–∏—Å–æ–∫", fontSize = 13.sp, maxLines = 1)
            }
        } else {
            OutlinedButton(
                onClick = {
                    sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                    if (userCurrentCity == null) {
                        onRequestGPS()
                    } else {
                        onOpenMapScreen()
                    }
                },
                modifier = Modifier
                    .weight(1f)
                    .height(buttonHeight),
                shape = RoundedCornerShape(4.dp),
                border = BorderStroke(1.dp, MaterialTheme.colorScheme.primary),
                contentPadding = PaddingValues(horizontal = 8.dp),
                colors = commonButtonColors
            ) {
                Icon(
                    imageVector = Icons.Default.Map,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text("–ù–∞ –∫–∞—Ä—Ç–µ", fontSize = 13.sp, maxLines = 1)
            }
        }

        // üéØ –ö–Ω–æ–ø–∫–∞ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º —Ä–∞–¥–∏—É—Å–∞
        Box(
            modifier = Modifier.weight(1f),
            contentAlignment = Alignment.Center
        ) {
            OutlinedButton(
                onClick = { radiusExpanded = true },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(buttonHeight),
                shape = RoundedCornerShape(4.dp),
                border = BorderStroke(1.dp, MaterialTheme.colorScheme.primary),
                contentPadding = PaddingValues(horizontal = 8.dp),
                colors = commonButtonColors
            ) {
                Icon(
                    imageVector = Icons.Default.Radar,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text(" + $selectedRadius", fontSize = 13.sp, maxLines = 1)
                Spacer(modifier = Modifier.width(4.dp))
                Icon(
                    imageVector = Icons.Default.ArrowDropDown,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(18.dp)
                )
            }

            // ‚¨á –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
            DropdownMenu(
                expanded = radiusExpanded,
                onDismissRequest = { radiusExpanded = false },
                modifier = Modifier
                    .wrapContentWidth()
                    .align(Alignment.TopCenter)
            ) {
                listOf("20–∫–º", "50–∫–º", "100–∫–º", "200–∫–º", "‚àû").forEach { radius ->
                    DropdownMenuItem(
                        text = { Text(radius) },
                        onClick = {
                            sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                            onRadiusChange(radius)
                            radiusExpanded = false
                        }
                    )
                }
            }
        }

        // ‚öôÔ∏è –ö–Ω–æ–ø–∫–∞ "–§–∏–ª—å—Ç—Ä"
        OutlinedButton(
            onClick = {
                sound.playSoundEffect(android.view.SoundEffectConstants.CLICK)
                onOpenFilters()
            },
            modifier = Modifier
                .weight(1f)
                .height(buttonHeight),
            shape = RoundedCornerShape(4.dp),
            border = BorderStroke(1.dp, MaterialTheme.colorScheme.primary),
            contentPadding = PaddingValues(horizontal = 8.dp),
            colors = commonButtonColors
        ) {
            Icon(
                imageVector = Icons.Default.FilterList,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(18.dp)
            )
            Spacer(modifier = Modifier.width(4.dp))
            Text("–§–∏–ª—å—Ç—Ä", fontSize = 13.sp, maxLines = 1)
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun StatisticsScreen(
    totalGP: Int,
    currentGP: Int,
    spentGP: Int,
    userPOIList: List<POI>,
    totalPOIList: List<POI>,
    allTypes: List<String>,
    showNavigationBar: @Composable () -> Unit,
    showTopAppBar: @Composable () -> Unit,
    gpViewModel: GPViewModel
) {
    val context = LocalContext.current
    val prefs = remember { UserPreferences(context) }
    val coroutineScope = rememberCoroutineScope()

    val typeStats = userPOIList.groupingBy { it.type }.eachCount()
    val leveledUpSet = remember { mutableStateMapOf<String, Int>() }

    var purchasedRegionsCount by remember { mutableStateOf(0) }
    var purchasedCountriesCount by remember { mutableStateOf(0) }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    LaunchedEffect(Unit) {
        coroutineScope.launch {
            val savedLevels = prefs.getCategoryLevels()
            savedLevels.forEach { (category, level) ->
                leveledUpSet[category] = level
            }
        }
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ —Å—Ç—Ä–∞–Ω (–≤—Ä–µ–º–µ–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–µ–ª–∞—é poi.csv)
        purchasedRegionsCount = prefs.getPurchasedRegions().size
        purchasedCountriesCount = prefs.getPurchasedCountries().size
    }

    val totalPOIs = totalPOIList.size
    val visitedPOIs = userPOIList.size

    val typeIcons = mapOf(
        "castle" to Icons.Default.Castle,
        "nature" to Icons.Default.Forest,
        "park" to Icons.Default.NaturePeople,
        "funpark" to Icons.Default.Attractions,
        "museum" to Icons.Default.Museum,
        "swimming" to Icons.Default.Pool,
        "hiking" to Icons.Default.DirectionsWalk,
        "cycling" to Icons.Default.DirectionsBike,
        "zoo" to Icons.Default.Pets,
        "city-walk" to Icons.Default.LocationCity,
        "festival" to Icons.Default.Celebration,
        "extreme" to Icons.Default.DownhillSkiing
    )

    val typeGoals = listOf(5, 10, 20, 50, 100) // –º–µ—Å—Ç –¥–æ —Å–ª–µ–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è

    Scaffold(
        topBar = { showTopAppBar() },
        bottomBar = { showNavigationBar() }
    ) { paddingValues ->
        LazyColumn(
            contentPadding = paddingValues,
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {

            item {
                // –ë–ª–æ–∫ 1: –û—á–∫–∏
                Text(
                    text = "üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤",
                    style = MaterialTheme.typography.headlineSmall,
                    modifier = Modifier.padding(vertical = 12.dp)
                )

                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 16.dp),
                    elevation = CardDefaults.cardElevation(6.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Row(Modifier.padding(vertical = 4.dp)) {
                            Text("üü¢ –ù–∞–±—Ä–∞–Ω–æ:", Modifier.weight(1f))
                            Text("$totalGP GP", fontWeight = FontWeight.Bold)
                        }
                        Row(Modifier.padding(vertical = 4.dp)) {
                            Text("üî¥ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:", Modifier.weight(1f))
                            Text("$spentGP GP", fontWeight = FontWeight.Bold)
                        }
                    }
                }

                // –ë–ª–æ–∫ 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                Text(
                    text = "üß≠ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    style = MaterialTheme.typography.headlineSmall,
                    modifier = Modifier.padding(bottom = 12.dp)
                )

                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 16.dp),
                    elevation = CardDefaults.cardElevation(6.dp)
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Row(Modifier.padding(vertical = 4.dp)) {
                            Text("\uD83C\uDF0D –°—Ç—Ä–∞–Ω –ø–æ—Å–µ—â–µ–Ω–æ:", Modifier.weight(1f))
                            Text(
                                "$purchasedCountriesCount",
                                fontWeight = FontWeight.Bold
                            )
                        }
                        Row(Modifier.padding(vertical = 4.dp)) {
                            Text("üö© –†–µ–≥–∏–æ–Ω–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ:", Modifier.weight(1f))
                            Text(
                                "$purchasedRegionsCount",
                                fontWeight = FontWeight.Bold
                            )
                        }
                        Row(Modifier.padding(vertical = 4.dp)) {
                            Text("‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ –º–µ—Å—Ç:", Modifier.weight(1f))
                            Text(
                                "$visitedPOIs / $totalPOIs",
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                }
            }

            item {
                Text(
                    text = "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    style = MaterialTheme.typography.headlineSmall,
                    modifier = Modifier.padding(bottom = 12.dp)
                )
            }

            items(allTypes) { type ->
                val count = typeStats[type] ?: 0
                val level = typeGoals.indexOfFirst { count < it }.let { if (it == -1) typeGoals.size else it }
                val currentGoal = typeGoals.getOrNull(level) ?: typeGoals.last()
                val nextGoal = currentGoal - count
                val percent = (count * 100 / currentGoal).coerceAtMost(100)
                val points = 1000// * (level + 1)
                val icon = typeIcons[type] ?: Icons.Default.Star

                val savedLevel = leveledUpSet[type] ?: 0
                val isNewLevelReached = level > savedLevel
                var showCongrats by remember { mutableStateOf(false) }

                if (showCongrats) {
                    LaunchedEffect(Unit) {
                        delay(2500)
                        showCongrats = false
                    }
                }

                val animatedProgress by animateFloatAsState(
                    targetValue = percent / 100f,
                    animationSpec = tween(durationMillis = 700),
                    label = "Animated Progress"
                )

                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    elevation = CardDefaults.cardElevation(8.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = if (isNewLevelReached) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surface
                    ),
                    shape = RoundedCornerShape(16.dp) // —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                ) {
                    Column(modifier = Modifier.padding(20.dp)) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Icon(
                                imageVector = icon,
                                contentDescription = type,
                                modifier = Modifier
                                    .size(40.dp)  // —É–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
                                    .padding(end = 16.dp),
                                tint = if (isNewLevelReached) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface
                            )
                            Text(
                                text = "${type.replaceFirstChar { it.uppercaseChar() }} - $count",
                                style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
                                color = if (isNewLevelReached) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface
                            )
                            Spacer(modifier = Modifier.weight(1f))
                            Text(
                                text = "–£—Ä–æ–≤–µ–Ω—å ${level + 1}",
                                style = MaterialTheme.typography.labelLarge.copy(fontWeight = FontWeight.Medium),
                                color = MaterialTheme.colorScheme.secondary
                            )
                        }

                        Spacer(modifier = Modifier.height(14.dp))

                        LinearProgressIndicator(
                            progress = animatedProgress,
                            color = MaterialTheme.colorScheme.primary,
                            trackColor = MaterialTheme.colorScheme.surfaceVariant,
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(16.dp)
                                .clip(RoundedCornerShape(8.dp))
                        )

                        Text(
                            text = "$nextGoal –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                            style = MaterialTheme.typography.bodyMedium,
                            modifier = Modifier.padding(top = 8.dp),
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )

                        if (isNewLevelReached) {
                            Button(
                                onClick = {
                                    showCongrats = true
                                    coroutineScope.launch {
                                        prefs.levelUpCategory(type, level, points)
                                        leveledUpSet[type] = level
                                        gpViewModel.addGP(1000)
                                        Toast.makeText(context, "+$points GP –∑–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!", Toast.LENGTH_SHORT).show()
                                    }
                                },
                                modifier = Modifier
                                    .align(Alignment.End)
                                    .padding(top = 12.dp),
                                colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primary)
                            ) {
                                Icon(Icons.Default.EmojiEvents, contentDescription = null)
                                Spacer(modifier = Modifier.width(6.dp))
                                Text("Level Up!", color = MaterialTheme.colorScheme.onPrimary)
                            }
                        }

                        if (showCongrats) {
                            Text(
                                text = "üéâ +$points GP!",
                                style = MaterialTheme.typography.bodyLarge.copy(
                                    color = MaterialTheme.colorScheme.primary,
                                    fontWeight = FontWeight.ExtraBold
                                ),
                                modifier = Modifier
                                    .align(Alignment.End)
                                    .padding(top = 10.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}







@Composable
fun LoadingScreen() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        CircularProgressIndicator()
    }
}


