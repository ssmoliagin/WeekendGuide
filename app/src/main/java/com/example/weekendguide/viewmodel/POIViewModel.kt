package com.example.weekendguide.viewmodel

import android.util.Log
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.weekendguide.data.locales.LocalizerTypes
import com.example.weekendguide.data.model.POI
import com.example.weekendguide.data.model.Region
import com.example.weekendguide.data.model.Review
import com.example.weekendguide.data.preferences.UserPreferences
import com.example.weekendguide.data.repository.DataRepository
import com.example.weekendguide.data.repository.UserRemoteDataSource
import com.example.weekendguide.data.repository.WikiRepository
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import org.json.JSONObject
import androidx.compose.runtime.State


class POIViewModel(
    private val translateViewModel: TranslateViewModel,
    private val dataRepository: DataRepository,
    private val wikiRepository: WikiRepository,
    private val region: List<Region>,
    private val userPreferences: UserPreferences,
    private val userRemote: UserRemoteDataSource
) : ViewModel() {

    // –Ø–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å)
    val language = translateViewModel.language.value

    // --- –ü–æ—Å–µ—â—ë–Ω–Ω—ã–µ POI ---
    private val _visitedPoiIds = MutableStateFlow<Set<String>>(emptySet())
    val visitedPoiIds: StateFlow<Set<String>> = _visitedPoiIds.asStateFlow()

    // --- –í–∏–∫–∏–ø–µ–¥–∏—è ---
    private val _wikiDescription = MutableStateFlow<String?>(null)
    val wikiDescription: StateFlow<String?> = _wikiDescription
    private var lastWikiTitle: String? = null

    // --- –°–ø–∏—Å–æ–∫ POI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ---
    private val _poiList = MutableStateFlow<List<POI>>(emptyList())
    val poiList: StateFlow<List<POI>> = _poiList

    private val _poisIsLoading = MutableStateFlow(false)
    val poisIsLoading: StateFlow<Boolean> = _poisIsLoading

    // --- –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ---
    val favoriteIds: StateFlow<Set<String>> = userPreferences.favoriteIdsFlow
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptySet())

    // --- –¢–∏–ø—ã POI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ---
    private val _typesIsLoading = MutableStateFlow(false)
    val typesIsLoading: StateFlow<Boolean> = _typesIsLoading

    private val _allTypes = MutableStateFlow<List<String>>(emptyList())
    val allTypes: StateFlow<List<String>> = _allTypes

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    init {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö
        viewModelScope.launch {
            loadAllReviews()
            userPreferences.visitedIdsFlow.collect {
                _visitedPoiIds.value = it
            }

        }

        // –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É —è–∑—ã–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º POI –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
        viewModelScope.launch {
            translateViewModel.language.collect {
                loadTypePOITranslations()
                loadPOIs()
            }
        }

        // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        loadTypePOITranslations()
        loadPOIs()
        observeLanguageChanges()
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö POI ---

    fun loadPOIs() {
        viewModelScope.launch {
            _poisIsLoading.value = true
            try {
                val allPOIs = mutableListOf<POI>()

                // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º POI
                for (reg in region) {
                    dataRepository.downloadAndCachePOI(reg, translateViewModel)

                    val pois = dataRepository.getPOIs(reg.region_code, translateViewModel)
                    allPOIs += pois
                }

                _poiList.value = allPOIs
            } catch (e: Exception) {
                Log.e("POIViewModel", "Error loading POIs", e)
            } finally {
                _poisIsLoading.value = false
            }
        }
    }

    fun loadTypePOITranslations() {
        viewModelScope.launch {
            _typesIsLoading.value = true
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
                val cached = dataRepository.getTypes()

                if (cached != null) {
                    Log.d("POIViewModel", "Loaded cached type.json: $cached")
                    LocalizerTypes.loadFromJson(cached)
                    val parsed = JSONObject(cached)
                    _allTypes.value = parsed.keys().asSequence().toList()
                }

                // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                val downloaded = dataRepository.downloadTypesJson()
                if (downloaded != null) {
                    Log.d("POIViewModel", "Downloaded types JSON: $downloaded")
                    LocalizerTypes.loadFromJson(downloaded)
                    val parsed = JSONObject(downloaded)
                    _allTypes.value = parsed.keys().asSequence().toList()
                }

            } catch (exception: Exception) {
                Log.e("POIViewModel", "Error loading Types", exception)
            } finally {
                _typesIsLoading.value = false
            }
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Wikipedia API ---

    fun loadWikipediaDescription(title: String) {
        lastWikiTitle = title
        _wikiDescription.value = null

        Log.d("POIViewModel", "–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è: $title –Ω–∞ —è–∑—ã–∫–µ ${translateViewModel.language.value}")

        viewModelScope.launch {
            val result = wikiRepository.fetchWikipediaDescription(title, translateViewModel.language.value)
            if (lastWikiTitle == title) {
                _wikiDescription.value = result
                Log.d("POIViewModel", "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å Wikipedia: ${result?.take(200) ?: "null"}")
            } else {
                Log.d("POIViewModel", "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, title —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            }
        }
    }

    private fun observeLanguageChanges() {
        viewModelScope.launch {
            translateViewModel.language.collect { newLang ->
                Log.d("POIViewModel", "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: $newLang")
                lastWikiTitle?.let { title ->
                    _wikiDescription.value = null
                    val result = wikiRepository.fetchWikipediaDescription(title, newLang)
                    if (lastWikiTitle == title) {
                        _wikiDescription.value = result
                        Log.d("POIViewModel", "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: ${result?.take(200) ?: "null"}")
                    }
                }
            }
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ POI ---
    fun toggleFavorite(poiId: String) {
        viewModelScope.launch {
            userPreferences.toggleFavorite(poiId)

            // üîÅ –ë–µ—Ä—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∏–∑ DataStore –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            val favorites = userPreferences.favoriteIdsFlow.first()
            val currentData = userPreferences.userDataFlow.first()
            val updatedData = currentData.copy(favorites = favorites.toList())
            userPreferences.saveUserData(updatedData)
            userRemote.launchSyncLocalToRemote(viewModelScope)
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–º–∏ POI ---
    fun markPoiVisited(poiId: String) {
        viewModelScope.launch {
            userPreferences.markVisited(poiId)

            // üîÅ –ë–µ—Ä—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            val visited = userPreferences.visitedIdsFlow.first()
            val currentData = userPreferences.userDataFlow.first()
            val updatedData = currentData.copy(visited = visited.toList())
            userPreferences.saveUserData(updatedData)
            userRemote.launchSyncLocalToRemote(viewModelScope)
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –û—Ç–∑—ã–≤–∞–º–∏ ---
    private val _reviews = MutableStateFlow<Map<String, List<Review>>>(emptyMap())
    val reviews: StateFlow<Map<String, List<Review>>> = _reviews

    fun loadReviews(poiId: String) {
        viewModelScope.launch {
            val loadedReviews = userRemote.getReviewsForPoi(poiId)
            _reviews.update { current ->
                current.toMutableMap().apply {
                    put(poiId, loadedReviews)
                }
            }
        }
    }

    fun submitReview(review: Review, onSuccess: () -> Unit, onError: (Exception) -> Unit) {
        viewModelScope.launch {
            try {
                userRemote.submitReview(review)
                loadReviews(review.poiId)
                onSuccess()
            } catch (e: Exception) {
                onError(e)
            }
        }
    }

    private fun loadAllReviews() {
        viewModelScope.launch {
            val loadedList = userRemote.getAllReviews() // List<Review>
            _reviews.value = loadedList.groupBy { it.poiId } // Map<String, List<Review>>
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∑—ã–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π POI
    fun hasUserReviewed(poiId: String, userId: String): Boolean {
        return _reviews.value[poiId]?.any { it.userId == userId } == true
    }
}
