package com.example.weekendguide.viewmodel

import android.app.Application
import android.location.Location
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.weekendguide.data.model.POI
import com.example.weekendguide.data.model.UserData
import com.example.weekendguide.data.preferences.UserPreferences
import com.example.weekendguide.data.repository.UserRemoteDataSource
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.filterNotNull
import kotlinx.coroutines.flow.dropWhile
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch

class PointsViewModel(
    private val application: Application,
    private val userPreferences: UserPreferences,
    private val userRemote: UserRemoteDataSource) : AndroidViewModel(application) {

    private val _current_gp = MutableStateFlow(0)
    private val _total_gp = MutableStateFlow(0)
    private val _spent_gp = MutableStateFlow(0)
    val currentGP: StateFlow<Int> = _current_gp.asStateFlow()
    val totalGP: StateFlow<Int> = _total_gp.asStateFlow()
    val spentGP: StateFlow<Int> = _spent_gp.asStateFlow()

    init {
        refreshGP()
    }

    fun refreshGP() {
        viewModelScope.launch {
            _current_gp.value = userPreferences.getCurrentGP()
            _total_gp.value = userPreferences.getTotalGP()
            _spent_gp.value = userPreferences.getSpentGP()
        }
    }

    //–ø–æ–ø–æ–ª–Ω—è–µ–º –æ—á–∫–∏
    fun addGP(amount: Int) {
        viewModelScope.launch {
            userPreferences.addGP(amount)
            _current_gp.value = userPreferences.getCurrentGP()
            _total_gp.value = userPreferences.getTotalGP()

            // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ Firestore
            val currentData = userPreferences.userDataFlow.first()
            val updatedData = UserData(
                current_GP = _current_gp.value,
                total_GP = _total_gp.value,
                spent_GP = _spent_gp.value
            )
            userPreferences.saveUserData(updatedData)
            userRemote.launchSyncLocalToRemote(viewModelScope)
        }
    }

    //—Ç—Ä–∞—Ç–∏–º –æ—á–∫–∏
    fun spentGP(amount: Int) {
        viewModelScope.launch {
            val success = userPreferences.spentGP(amount)
            if (success) {
                _current_gp.value = userPreferences.getCurrentGP()
                _spent_gp.value = userPreferences.getSpentGP()

                // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ Firestore
                val currentData = userPreferences.userDataFlow.first()
                val updatedData = UserData(
                    current_GP = _current_gp.value,
                    total_GP = _total_gp.value,
                    spent_GP = _spent_gp.value
                )
                userPreferences.saveUserData(updatedData)
                userRemote.launchSyncLocalToRemote(viewModelScope)
            } else {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å LiveData/Event –¥–ª—è UI: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤"
            }
        }
    }

    //–æ–±–Ω—É–ª–∏—Ç—å
    fun resetGP() {
        viewModelScope.launch {
            userPreferences.resetGP()
            _current_gp.value = 0
            _total_gp.value = 0
            _spent_gp.value = 0

            // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤ Firestore
            val currentData = userPreferences.userDataFlow.first()
            val updatedData = UserData(
                current_GP = _current_gp.value,
                total_GP = _total_gp.value,
                spent_GP = _spent_gp.value
            )
            userPreferences.saveUserData(updatedData)
            userRemote.launchSyncLocalToRemote(viewModelScope)
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ POI, –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—è–¥–æ–º ‚Äî –Ω–∞—á–∏—Å–ª—è–µ—Ç GP.
     * @return true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –æ—á–∫–∏, false ‚Äî –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ.
     */
    suspend fun checkAndAwardGPForPOI(
        poi: POI,
        locationViewModel: LocationViewModel,
        onResult: (Boolean) -> Unit
    ) {
        try {
            val oldLocation = locationViewModel.location.value

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é GPS-–ª–æ–∫–∞—Ü–∏—é
            locationViewModel.detectLocationFromGPS()

            // –ñ–¥—ë–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            val newLocation = locationViewModel.location
                .filterNotNull()
                .dropWhile { it == oldLocation }
                .first()

            // –°—á–∏—Ç–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            val result = FloatArray(1)
            Location.distanceBetween(
                newLocation.first,
                newLocation.second,
                poi.lat,
                poi.lng,
                result
            )
            val distanceMeters = result[0]

            if (distanceMeters < 100_000_000) {
                addGP(100)
                onResult(true)
            } else {
                onResult(false)
            }
        } catch (e: Exception) {
            onResult(false)
            e.printStackTrace()
        }
    }
}
